import io.gatling.core.Predef._
import io.gatling.core.structure.ScenarioBuilder
import io.gatling.http.Predef._
import io.gatling.http.protocol.HttpProtocolBuilder

import scala.concurrent.duration._

class DungeonGameRedTeamTestNew extends Simulation {

  val httpProtocol: HttpProtocolBuilder = http
    .baseUrl("http://localhost:8080")
    .acceptHeader("application/json")
    .contentTypeHeader("application/json")
    .userAgentHeader("RedTeam-Gatling-Attack")
    .disableFollowRedirect

  // Malicious and edge case payloads
  val maliciousPayloads = List(
    """{"dungeon": null}""",
    """{"dungeon": []}""",
    """{"dungeon": [[]]}""",
    """{"invalid": "payload"}""",
    """{"dungeon": [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]]}""", // Single large row
    """{"dungeon": [[-999999, 999999, -999999], [999999, -999999, 999999], [-999999, 999999, -999999]]}""" // Extreme values
  )

  // Resource exhaustion payloads - extremely large dungeons for maximum stress
  val massiveDungeon25x25 = """{"dungeon": [[-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [-2, -4, -6, -8, -10, -12, -14, -16, -18, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -42, -44, -46, -48, -50], [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75], [-4, -8, -12, -16, -20, -24, -28, -32, -36, -40, -44, -48, -52, -56, -60, -64, -68, -72, -76, -80, -84, -88, -92, -96, -100], [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125], [-6, -12, -18, -24, -30, -36, -42, -48, -54, -60, -66, -72, -78, -84, -90, -96, -102, -108, -114, -120, -126, -132, -138, -144, -150], [7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98, 105, 112, 119, 126, 133, 140, 147, 154, 161, 168, 175], [-8, -16, -24, -32, -40, -48, -56, -64, -72, -80, -88, -96, -104, -112, -120, -128, -136, -144, -152, -160, -168, -176, -184, -192, -200], [9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126, 135, 144, 153, 162, 171, 180, 189, 198, 207, 216, 225], [-10, -20, -30, -40, -50, -60, -70, -80, -90, -100, -110, -120, -130, -140, -150, -160, -170, -180, -190, -200, -210, -220, -230, -240, -250], [11, 22, 33, 44, 55, 66, 77, 88, 99, 110, 121, 132, 143, 154, 165, 176, 187, 198, 209, 220, 231, 242, 253, 264, 275], [-12, -24, -36, -48, -60, -72, -84, -96, -108, -120, -132, -144, -156, -168, -180, -192, -204, -216, -228, -240, -252, -264, -276, -288, -300], [13, 26, 39, 52, 65, 78, 91, 104, 117, 130, 143, 156, 169, 182, 195, 208, 221, 234, 247, 260, 273, 286, 299, 312, 325], [-14, -28, -42, -56, -70, -84, -98, -112, -126, -140, -154, -168, -182, -196, -210, -224, -238, -252, -266, -280, -294, -308, -322, -336, -350], [15, 30, 45, 60, 75, 90, 105, 120, 135, 150, 165, 180, 195, 210, 225, 240, 255, 270, 285, 300, 315, 330, 345, 360, 375], [-16, -32, -48, -64, -80, -96, -112, -128, -144, -160, -176, -192, -208, -224, -240, -256, -272, -288, -304, -320, -336, -352, -368, -384, -400], [17, 34, 51, 68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255, 272, 289, 306, 323, 340, 357, 374, 391, 408, 425], [-18, -36, -54, -72, -90, -108, -126, -144, -162, -180, -198, -216, -234, -252, -270, -288, -306, -324, -342, -360, -378, -396, -414, -432, -450], [19, 38, 57, 76, 95, 114, 133, 152, 171, 190, 209, 228, 247, 266, 285, 304, 323, 342, 361, 380, 399, 418, 437, 456, 475], [-20, -40, -60, -80, -100, -120, -140, -160, -180, -200, -220, -240, -260, -280, -300, -320, -340, -360, -380, -400, -420, -440, -460, -480, -500], [21, 42, 63, 84, 105, 126, 147, 168, 189, 210, 231, 252, 273, 294, 315, 336, 357, 378, 399, 420, 441, 462, 483, 504, 525], [-22, -44, -66, -88, -110, -132, -154, -176, -198, -220, -242, -264, -286, -308, -330, -352, -374, -396, -418, -440, -462, -484, -506, -528, -550], [23, 46, 69, 92, 115, 138, 161, 184, 207, 230, 253, 276, 299, 322, 345, 368, 391, 414, 437, 460, 483, 506, 529, 552, 575], [-24, -48, -72, -96, -120, -144, -168, -192, -216, -240, -264, -288, -312, -336, -360, -384, -408, -432, -456, -480, -504, -528, -552, -576, -600]]}"""

  val extremeDungeon30x30 = """{"dungeon": [[-1000, 2000, -3000, 4000, -5000, 6000, -7000, 8000, -9000, 10000, -11000, 12000, -13000, 14000, -15000, 16000, -17000, 18000, -19000, 20000, -21000, 22000, -23000, 24000, -25000, 26000, -27000, 28000, -29000, 30000], [1000, -2000, 3000, -4000, 5000, -6000, 7000, -8000, 9000, -10000, 11000, -12000, 13000, -14000, 15000, -16000, 17000, -18000, 19000, -20000, 21000, -22000, 23000, -24000, 25000, -26000, 27000, -28000, 29000, -30000], [-2000, 4000, -6000, 8000, -10000, 12000, -14000, 16000, -18000, 20000, -22000, 24000, -26000, 28000, -30000, 32000, -34000, 36000, -38000, 40000, -42000, 44000, -46000, 48000, -50000, 52000, -54000, 56000, -58000, 60000], [3000, -6000, 9000, -12000, 15000, -18000, 21000, -24000, 27000, -30000, 33000, -36000, 39000, -42000, 45000, -48000, 51000, -54000, 57000, -60000, 63000, -66000, 69000, -72000, 75000, -78000, 81000, -84000, 87000, -90000], [-4000, 8000, -12000, 16000, -20000, 24000, -28000, 32000, -36000, 40000, -44000, 48000, -52000, 56000, -60000, 64000, -68000, 72000, -76000, 80000, -84000, 88000, -92000, 96000, -100000, 104000, -108000, 112000, -116000, 120000], [5000, -10000, 15000, -20000, 25000, -30000, 35000, -40000, 45000, -50000, 55000, -60000, 65000, -70000, 75000, -80000, 85000, -90000, 95000, -100000, 105000, -110000, 115000, -120000, 125000, -130000, 135000, -140000, 145000, -150000], [-6000, 12000, -18000, 24000, -30000, 36000, -42000, 48000, -54000, 60000, -66000, 72000, -78000, 84000, -90000, 96000, -102000, 108000, -114000, 120000, -126000, 132000, -138000, 144000, -150000, 156000, -162000, 168000, -174000, 180000], [7000, -14000, 21000, -28000, 35000, -42000, 49000, -56000, 63000, -70000, 77000, -84000, 91000, -98000, 105000, -112000, 119000, -126000, 133000, -140000, 147000, -154000, 161000, -168000, 175000, -182000, 189000, -196000, 203000, -210000], [-8000, 16000, -24000, 32000, -40000, 48000, -56000, 64000, -72000, 80000, -88000, 96000, -104000, 112000, -120000, 128000, -136000, 144000, -152000, 160000, -168000, 176000, -184000, 192000, -200000, 208000, -216000, 224000, -232000, 240000], [9000, -18000, 27000, -36000, 45000, -54000, 63000, -72000, 81000, -90000, 99000, -108000, 117000, -126000, 135000, -144000, 153000, -162000, 171000, -180000, 189000, -198000, 207000, -216000, 225000, -234000, 243000, -252000, 261000, -270000], [-10000, 20000, -30000, 40000, -50000, 60000, -70000, 80000, -90000, 100000, -110000, 120000, -130000, 140000, -150000, 160000, -170000, 180000, -190000, 200000, -210000, 220000, -230000, 240000, -250000, 260000, -270000, 280000, -290000, 300000], [11000, -22000, 33000, -44000, 55000, -66000, 77000, -88000, 99000, -110000, 121000, -132000, 143000, -154000, 165000, -176000, 187000, -198000, 209000, -220000, 231000, -242000, 253000, -264000, 275000, -286000, 297000, -308000, 319000, -330000], [-12000, 24000, -36000, 48000, -60000, 72000, -84000, 96000, -108000, 120000, -132000, 144000, -156000, 168000, -180000, 192000, -204000, 216000, -228000, 240000, -252000, 264000, -276000, 288000, -300000, 312000, -324000, 336000, -348000, 360000], [13000, -26000, 39000, -52000, 65000, -78000, 91000, -104000, 117000, -130000, 143000, -156000, 169000, -182000, 195000, -208000, 221000, -234000, 247000, -260000, 273000, -286000, 299000, -312000, 325000, -338000, 351000, -364000, 377000, -390000], [-14000, 28000, -42000, 56000, -70000, 84000, -98000, 112000, -126000, 140000, -154000, 168000, -182000, 196000, -210000, 224000, -238000, 252000, -266000, 280000, -294000, 308000, -322000, 336000, -350000, 364000, -378000, 392000, -406000, 420000], [15000, -30000, 45000, -60000, 75000, -90000, 105000, -120000, 135000, -150000, 165000, -180000, 195000, -210000, 225000, -240000, 255000, -270000, 285000, -300000, 315000, -330000, 345000, -360000, 375000, -390000, 405000, -420000, 435000, -450000], [-16000, 32000, -48000, 64000, -80000, 96000, -112000, 128000, -144000, 160000, -176000, 192000, -208000, 224000, -240000, 256000, -272000, 288000, -304000, 320000, -336000, 352000, -368000, 384000, -400000, 416000, -432000, 448000, -464000, 480000], [17000, -34000, 51000, -68000, 85000, -102000, 119000, -136000, 153000, -170000, 187000, -204000, 221000, -238000, 255000, -272000, 289000, -306000, 323000, -340000, 357000, -374000, 391000, -408000, 425000, -442000, 459000, -476000, 493000, -510000], [-18000, 36000, -54000, 72000, -90000, 108000, -126000, 144000, -162000, 180000, -198000, 216000, -234000, 252000, -270000, 288000, -306000, 324000, -342000, 360000, -378000, 396000, -414000, 432000, -450000, 468000, -486000, 504000, -522000, 540000], [19000, -38000, 57000, -76000, 95000, -114000, 133000, -152000, 171000, -190000, 209000, -228000, 247000, -266000, 285000, -304000, 323000, -342000, 361000, -380000, 399000, -418000, 437000, -456000, 475000, -494000, 513000, -532000, 551000, -570000], [-20000, 40000, -60000, 80000, -100000, 120000, -140000, 160000, -180000, 200000, -220000, 240000, -260000, 280000, -300000, 320000, -340000, 360000, -380000, 400000, -420000, 440000, -460000, 480000, -500000, 520000, -540000, 560000, -580000, 600000], [21000, -42000, 63000, -84000, 105000, -126000, 147000, -168000, 189000, -210000, 231000, -252000, 273000, -294000, 315000, -336000, 357000, -378000, 399000, -420000, 441000, -462000, 483000, -504000, 525000, -546000, 567000, -588000, 609000, -630000], [-22000, 44000, -66000, 88000, -110000, 132000, -154000, 176000, -198000, 220000, -242000, 264000, -286000, 308000, -330000, 352000, -374000, 396000, -418000, 440000, -462000, 484000, -506000, 528000, -550000, 572000, -594000, 616000, -638000, 660000], [23000, -46000, 69000, -92000, 115000, -138000, 161000, -184000, 207000, -230000, 253000, -276000, 299000, -322000, 345000, -368000, 391000, -414000, 437000, -460000, 483000, -506000, 529000, -552000, 575000, -598000, 621000, -644000, 667000, -690000], [-24000, 48000, -72000, 96000, -120000, 144000, -168000, 192000, -216000, 240000, -264000, 288000, -312000, 336000, -360000, 384000, -408000, 432000, -456000, 480000, -504000, 528000, -552000, 576000, -600000, 624000, -648000, 672000, -696000, 720000], [25000, -50000, 75000, -100000, 125000, -150000, 175000, -200000, 225000, -250000, 275000, -300000, 325000, -350000, 375000, -400000, 425000, -450000, 475000, -500000, 525000, -550000, 575000, -600000, 625000, -650000, 675000, -700000, 725000, -750000], [-26000, 52000, -78000, 104000, -130000, 156000, -182000, 208000, -234000, 260000, -286000, 312000, -338000, 364000, -390000, 416000, -442000, 468000, -494000, 520000, -546000, 572000, -598000, 624000, -650000, 676000, -702000, 728000, -754000, 780000], [27000, -54000, 81000, -108000, 135000, -162000, 189000, -216000, 243000, -270000, 297000, -324000, 351000, -378000, 405000, -432000, 459000, -486000, 513000, -540000, 567000, -594000, 621000, -648000, 675000, -702000, 729000, -756000, 783000, -810000], [-28000, 56000, -84000, 112000, -140000, 168000, -196000, 224000, -252000, 280000, -308000, 336000, -364000, 392000, -420000, 448000, -476000, 504000, -532000, 560000, -588000, 616000, -644000, 672000, -700000, 728000, -756000, 784000, -812000, 840000], [29000, -58000, 87000, -116000, 145000, -174000, 203000, -232000, 261000, -290000, 319000, -348000, 377000, -406000, 435000, -464000, 493000, -522000, 551000, -580000, 609000, -638000, 667000, -696000, 725000, -754000, 783000, -812000, 841000, -870000]]}"""

  val validPayload = """{"dungeon": [[-2, -3, 3], [-5, -10, 1], [10, 30, -5]]}"""

  // Rapid fire attack with extreme payloads
  val rapidFireAttack: ScenarioBuilder = scenario("Rapid Fire Attack")
    .repeat(150) {
      exec(
        http("Rapid Request")
          .post("/api/dungeon/calculate")
          .body(StringBody(session => {
            scala.util.Random.nextInt(10) match {
              case n if n < 6 => validPayload
              case n if n < 8 => massiveDungeon25x25
              case _ => extremeDungeon30x30
            }
          }))
          .check(status.in(200, 400, 429, 500, 503))
      )
    }

  // Malicious payload attack
  val maliciousPayloadAttack: ScenarioBuilder = scenario("Malicious Payload Attack")
    .repeat(75) {
      exec(
        http("Malicious Request")
          .post("/api/dungeon/calculate")
          .body(StringBody(session => maliciousPayloads(scala.util.Random.nextInt(maliciousPayloads.length))))
          .check(status.in(200, 400, 422, 500))
      )
      .pause(100.milliseconds, 500.milliseconds)
    }

  // Resource exhaustion attack with massive dungeons
  val resourceExhaustionAttack: ScenarioBuilder = scenario("Resource Exhaustion Attack")
    .repeat(30) {
      exec(
        http("Extreme Resource Consumption")
          .post("/api/dungeon/calculate")
          .body(StringBody(session => {
            if (scala.util.Random.nextBoolean()) massiveDungeon25x25 else extremeDungeon30x30
          }))
          .check(status.in(200, 429, 500, 503))
          .check(responseTimeInMillis.lt(120000)) // Allow up to 2 minutes for extreme calculations
      )
      .pause(500.milliseconds, 2.seconds)
    }

  // Memory bomb attack - rapid succession of 30x30 dungeons
  val memoryBombAttack: ScenarioBuilder = scenario("Memory Bomb Attack")
    .repeat(15) {
      exec(
        http("Memory Bomb - 30x30 Dungeon")
          .post("/api/dungeon/calculate")
          .body(StringBody(extremeDungeon30x30))
          .check(status.in(200, 429, 500, 503, 504))
      )
    }

  // Multi-endpoint attack
  val multiEndpointAttack: ScenarioBuilder = scenario("Multi-Endpoint Attack")
    .repeat(40) {
      exec(
        http("Calculate")
          .post("/api/dungeon/calculate")
          .body(StringBody(validPayload))
          .check(status.in(200, 429, 500))
      )
      .exec(
        http("Get Results")
          .get("/api/dungeon/results?hours=24")
          .check(status.in(200, 429, 500))
      )
      .exec(
        http("Get Stats")
          .get("/api/dungeon/stats?hours=24")
          .check(status.in(200, 429, 500))
      )
      .pause(50.milliseconds, 200.milliseconds)
    }

  // Slow loris attack with massive payloads
  val slowLorisAttack: ScenarioBuilder = scenario("Slow Loris Style Attack")
    .repeat(10) {
      exec(
        http("Slow Large Request")
          .post("/api/dungeon/calculate")
          .body(StringBody(massiveDungeon25x25))
          .check(status.in(200, 408, 429, 500, 503))
      )
      .pause(60.seconds)
    }

  setUp(
    // Phase 1: Rapid fire attacks with mixed payloads
    rapidFireAttack.inject(
      atOnceUsers(75),
      nothingFor(10.seconds),
      atOnceUsers(150)
    ),
    
    // Phase 2: Malicious payloads
    maliciousPayloadAttack.inject(
      constantUsersPerSec(15) during (2.minutes)
    ),
    
    // Phase 3: Resource exhaustion with extreme dungeons
    resourceExhaustionAttack.inject(
      nothingFor(30.seconds),
      rampUsers(25) during (1.minute),
      constantUsersPerSec(10) during (2.minutes)
    ),
    
    // Phase 4: Memory bomb attack
    memoryBombAttack.inject(
      nothingFor(90.seconds),
      rampUsers(5) during (30.seconds),
      constantUsersPerSec(2) during (1.minute)
    ),
    
    // Phase 5: Multi-endpoint attack
    multiEndpointAttack.inject(
      constantUsersPerSec(30) during (3.minutes)
    ),
    
    // Phase 6: Slow loris with large payloads
    slowLorisAttack.inject(
      constantUsersPerSec(2) during (5.minutes)
    )
  ).protocols(httpProtocol)
    .maxDuration(7.minutes)
    .assertions(
      // Very relaxed assertions for extreme attack scenarios
      global.responseTime.max.lt(180000), // Allow up to 3 minutes for 30x30 dungeons
      global.responseTime.mean.lt(30000),
      global.successfulRequests.percent.gt(50), // Accept up to 50% failures under extreme attack
      details("Rapid Request").responseTime.percentile3.lt(60000)
    )
}
